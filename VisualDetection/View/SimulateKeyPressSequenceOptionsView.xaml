<UserControl x:Class="VisualDetection.View.SimulateKeyPressSequenceOptionsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             xmlns:local="clr-namespace:VisualDetection.ViewModel"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
        <Grid>

            <Grid.RowDefinitions>
                <RowDefinition Height="45"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Label Grid.Row="0" Content="Options for Simulating Key Press Sequence: " Style="{StaticResource OutputOptionsTitleLabel}"/>
            <StackPanel Grid.Row="1" Margin="5" Grid.Column="0" Grid.ColumnSpan="2" ToolTipService.ShowDuration="20000">
                <StackPanel.ToolTip>
                    <StackPanel>
                        <TextBlock FontWeight="Bold">Insert Key Sequence</TextBlock>
                        <TextBlock>
                            You can enter the desired sequence of keys, which should be activated by the right and left trigger here. All keys from the keyboard are accepted, including function keys, 
                            or for example the Windows-Key. <LineBreak/><LineBreak/>
                            Each input is directly converted and displayed as windows-keycode. If you want to add a combination of keys you can use the '+' button as follows: <LineBreak/>
                            Add the first key, press the '+' button, then add the second key. You can create combinations of even more keys this way. <LineBreak/><LineBreak/>
                            To delete the last key in the seque press the '&lt;--' button, to delete the complete sequence, press the 'Clear' button <LineBreak/><LineBreak/>
                            The value set in the cool down timer box will determine the minimum time, between two activations for each side. <LineBreak/>
                            Hint: Some special keys are internally combination of several other keys. For example [AltGr] key is a combination of [Alt] and [Ctrl]
                        </TextBlock>
                    </StackPanel>
                </StackPanel.ToolTip>
                <Label Content="Select Sequence for Right Side: " Style="{StaticResource OptionsTitleLabel}"/>
                <TextBox Name="RightSideTextbox" Text="{Binding RightSideSequence, Mode=OneWay}" TextWrapping="NoWrap" MinHeight="100" VerticalContentAlignment="Top" 
                         CaretBrush="Transparent" IsReadOnly="True" SelectionBrush="Transparent">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="KeyUp">
                            <ei:CallMethodAction TargetObject="{Binding}" MethodName="AddKey"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="GotFocus">
                            <ei:CallMethodAction TargetObject="{Binding}" MethodName="GotFocusSetup" />
                        </i:EventTrigger>
                        <i:EventTrigger EventName="LostFocus">
                            <ei:CallMethodAction TargetObject="{Binding}" MethodName="TextboxLostFocus" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
                <WrapPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,5">
                    <WrapPanel.Style>
                        <Style>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SetFocusToRightSideTextBox}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=RightSideTextbox}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </WrapPanel.Style>
                    <Button Content="+" Template="{DynamicResource ButtonBaseControlTemplate1}" Command="{Binding RightSidePlusButtonClicked}"/>
                    <Button Content="&lt;--" Template="{DynamicResource ButtonBaseControlTemplate1}" Command="{Binding RightSideBackSlashButtonClicked}"/>
                    <Button Content="Clear" Template="{DynamicResource ButtonBaseControlTemplate1}" Command="{Binding RightSideClearButtonClicked}"/>
                </WrapPanel>
                <Label Content="Select Sequence for Left Side: " Style="{StaticResource OptionsTitleLabel}"/>
                <TextBox Name="LeftSideTextbox" Text="{Binding LeftSideSequence, Mode=OneWay}" TextWrapping="NoWrap" MinHeight="100" VerticalContentAlignment="Top" 
                         CaretBrush="Transparent" IsReadOnly="True" SelectionBrush="Transparent">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="KeyUp">
                            <ei:CallMethodAction TargetObject="{Binding}" MethodName="AddKey"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="GotFocus">
                            <ei:CallMethodAction TargetObject="{Binding}" MethodName="GotFocusSetup" />
                        </i:EventTrigger>
                        <i:EventTrigger EventName="LostFocus">
                            <ei:CallMethodAction TargetObject="{Binding}" MethodName="TextboxLostFocus" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
                <WrapPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,5">
                    <WrapPanel.Style>
                        <Style>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SetFocusToLeftSideTextBox}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=LeftSideTextbox}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </WrapPanel.Style>
                    <Button Content="+" Template="{DynamicResource ButtonBaseControlTemplate1}" Command="{Binding LeftSidePlusButtonClicked}"/>
                    <Button Content="&lt;--" Template="{DynamicResource ButtonBaseControlTemplate1}" Command="{Binding LeftSideBackSlashButtonClicked}"/>
                    <Button Content="Clear" Template="{DynamicResource ButtonBaseControlTemplate1}" Command="{Binding LeftSideClearButtonClicked}"/>
                </WrapPanel>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0">
                        <Label Grid.Row="0" Grid.Column="0" Content="Select CoolDown Time [ms]: " Style="{StaticResource OptionsTitleLabel}"/>
                        <TextBox Name="CoolDownTimer" Grid.Row="0" Grid.Column="0" Text="{Binding CoolDownTimer, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap"/>
                    </StackPanel>
                </Grid>
            </StackPanel>
        </Grid>
    </ScrollViewer>
</UserControl>
